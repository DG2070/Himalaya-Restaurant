/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AdminRouteImport } from './routes/_admin'
import { Route as AdminIndexRouteImport } from './routes/_admin/index'
import { Route as AdminGalleryRouteImport } from './routes/_admin/gallery'
import { Route as AdminFoodsRouteImport } from './routes/_admin/foods'
import { Route as AdminFoodGroupRouteImport } from './routes/_admin/food-group'
import { Route as AdminCustomerFeedbackRouteImport } from './routes/_admin/customer-feedback'
import { Route as AdminContactRouteImport } from './routes/_admin/contact'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminGalleryRoute = AdminGalleryRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => AdminRoute,
} as any)
const AdminFoodsRoute = AdminFoodsRouteImport.update({
  id: '/foods',
  path: '/foods',
  getParentRoute: () => AdminRoute,
} as any)
const AdminFoodGroupRoute = AdminFoodGroupRouteImport.update({
  id: '/food-group',
  path: '/food-group',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCustomerFeedbackRoute = AdminCustomerFeedbackRouteImport.update({
  id: '/customer-feedback',
  path: '/customer-feedback',
  getParentRoute: () => AdminRoute,
} as any)
const AdminContactRoute = AdminContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/contact': typeof AdminContactRoute
  '/customer-feedback': typeof AdminCustomerFeedbackRoute
  '/food-group': typeof AdminFoodGroupRoute
  '/foods': typeof AdminFoodsRoute
  '/gallery': typeof AdminGalleryRoute
  '/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/contact': typeof AdminContactRoute
  '/customer-feedback': typeof AdminCustomerFeedbackRoute
  '/food-group': typeof AdminFoodGroupRoute
  '/foods': typeof AdminFoodsRoute
  '/gallery': typeof AdminGalleryRoute
  '/': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/_admin/contact': typeof AdminContactRoute
  '/_admin/customer-feedback': typeof AdminCustomerFeedbackRoute
  '/_admin/food-group': typeof AdminFoodGroupRoute
  '/_admin/foods': typeof AdminFoodsRoute
  '/_admin/gallery': typeof AdminGalleryRoute
  '/_admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/contact'
    | '/customer-feedback'
    | '/food-group'
    | '/foods'
    | '/gallery'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/contact'
    | '/customer-feedback'
    | '/food-group'
    | '/foods'
    | '/gallery'
    | '/'
  id:
    | '__root__'
    | '/_admin'
    | '/login'
    | '/_admin/contact'
    | '/_admin/customer-feedback'
    | '/_admin/food-group'
    | '/_admin/foods'
    | '/_admin/gallery'
    | '/_admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_admin/': {
      id: '/_admin/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/gallery': {
      id: '/_admin/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof AdminGalleryRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/foods': {
      id: '/_admin/foods'
      path: '/foods'
      fullPath: '/foods'
      preLoaderRoute: typeof AdminFoodsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/food-group': {
      id: '/_admin/food-group'
      path: '/food-group'
      fullPath: '/food-group'
      preLoaderRoute: typeof AdminFoodGroupRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/customer-feedback': {
      id: '/_admin/customer-feedback'
      path: '/customer-feedback'
      fullPath: '/customer-feedback'
      preLoaderRoute: typeof AdminCustomerFeedbackRouteImport
      parentRoute: typeof AdminRoute
    }
    '/_admin/contact': {
      id: '/_admin/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof AdminContactRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminContactRoute: typeof AdminContactRoute
  AdminCustomerFeedbackRoute: typeof AdminCustomerFeedbackRoute
  AdminFoodGroupRoute: typeof AdminFoodGroupRoute
  AdminFoodsRoute: typeof AdminFoodsRoute
  AdminGalleryRoute: typeof AdminGalleryRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminContactRoute: AdminContactRoute,
  AdminCustomerFeedbackRoute: AdminCustomerFeedbackRoute,
  AdminFoodGroupRoute: AdminFoodGroupRoute,
  AdminFoodsRoute: AdminFoodsRoute,
  AdminGalleryRoute: AdminGalleryRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
